{
	"Z-Wave message classes": {
		"prefix": "zwmsg",
		"body": [
			"import { FunctionType, MessagePriority, MessageType } from \"../message/Constants\";",
			"import { expectedResponse, Message, messageTypes, priority} from \"../message/Message\";",
			"",
			"@messageTypes(MessageType.Request, FunctionType.${1})",
			"@expectedResponse(FunctionType.${1})",
			"@priority(MessagePriority.${2})",
			"export class ${1}Request extends Message {",
			"",
			"}",
			"",
			"@messageTypes(MessageType.Response, FunctionType.${1})",
			"export class ${1}Response extends Message {",
			"",
			"\tpublic deserialize(data: Buffer): number {",
			"\t\tconst ret = super.deserialize(data);",
			"",
			"\t\t${0:// Parse payload here}",
			"",
			"\t\treturn ret;",
			"\t}",
			"}",
			""
		]
	},
	"Z-Wave message class test": {
		"prefix": "zwmsgtest",
		"body": [
			"describe(\"lib/${1:driver}/${2:Test}${3:Request} => \", () => {",
			"\tconst req = new ${2}${3}(undefined);",
			"",
			"\tit(\"should be a Message\", () => {",
			"\t\texpect(req).toBeInstanceOf(Message);",
			"\t});",
			"\tit(\"with type ${3}\", () => {",
			"\t\texpect(getMessageType(req)).toBe(MessageType.${3});",
			"\t\texpect(getMessageTypeStatic(${2}${3})).toBe(MessageType.${3});",
			"\t});",
			"\tit(\"and priority ${4:Normal}\", () => {",
			"\t\texpect(getDefaultPriority(req)).toBe(MessagePriority.${4});",
			"\t\texpect(getDefaultPriorityStatic(${2}${3})).toBe(MessagePriority.${4});",
			"\t});",
			"\tit(\"and a function type ${2}\", () => {",
			"\t\texpect(getFunctionType(req)).toBe(FunctionType.${2});",
			"\t\texpect(getFunctionTypeStatic(${2}${3})).toBe(FunctionType.${2});",
			"\t});",
			"\tit(\"that expects a ${2} response\", () => {",
			"\t\texpect(getExpectedResponse(req)).toBe(FunctionType.${2});",
			"\t\texpect(getExpectedResponseStatic(${2}${3})).toBe(FunctionType.${2});",
			"\t});",
			"",
			"});"
		]
	},
	"Z-Wave toJSON override": {
		"prefix": "zwjson",
		"body": [
			"public toJSON() {",
			"\treturn super.toJSONInherited({",
			"\t\t${0}",
			"\t});",
			"}"
		]
	},
	"Z-Wave Command Class implementation": {
		"prefix": "zwcc",
		"body": [
			"import { IDriver } from \"../driver/IDriver\";",
			"import { ZWaveError, ZWaveErrorCodes } from \"../error/ZWaveError\";",
			"import { CommandClass, commandClass, CommandClasses, expectedCCResponse, implementedVersion } from \"./CommandClass\";",
			"",
			"export enum ${1}Command {",
			"\t${0:// All the supported commands}",
			"}",
			"",
			"@commandClass(CommandClasses.${1})",
			"@implementedVersion(${2:1})",
			"@expectedCCResponse(CommandClasses.${1})",
			"export class ${1}CC extends CommandClass {",
			"",
			"\t// tslint:disable:unified-signatures",
			"\tconstructor(",
			"\t\tdriver: IDriver,",
			"\t\tnodeId?: number,",
			"\t);",
			"",
			"\tconstructor(",
			"\t\tdriver: IDriver,",
			"\t\tpublic nodeId: number,",
			"\t\tpublic ccCommand?: ${1}Command,",
			"\t) {",
			"\t\tsuper(driver, nodeId);",
			"\t}",
			"\t// tslint:enable:unified-signatures",
			"",
			"\tpublic serialize(): Buffer {",
			"\t\tswitch (this.ccCommand) {",
			"\t\t\t// case ${1}Command.TODO:",
			"\t\t\t// \t// serialize payload",
			"\t\t\t// \tbreak;",
			"\t\t\tdefault:",
			"\t\t\t\tthrow new ZWaveError(",
			"\t\t\t\t\t\"Cannot serialize a ${1} CC with a command other than __TODO__\",",
			"\t\t\t\t\tZWaveErrorCodes.CC_Invalid,",
			"\t\t\t\t);",
			"\t\t}",
			"",
			"\t\treturn super.serialize();",
			"\t}",
			"",
			"\tpublic deserialize(data: Buffer): void {",
			"\t\tsuper.deserialize(data);",
			"",
			"\t\tthis.ccCommand = this.payload[0];",
			"\t\tswitch (this.ccCommand) {",
			"\t\t\t// case ${1}Command.TODO:",
			"\t\t\t// \t// parse payload",
			"\t\t\t// \tbreak;",
			"",
			"\t\t\tdefault:",
			"\t\t\t\tthrow new ZWaveError(",
			"\t\t\t\t\t\"Cannot deserialize a ${1} CC with a command other than TODO\",",
			"\t\t\t\t\tZWaveErrorCodes.CC_Invalid,",
			"\t\t\t\t);",
			"\t\t}",
			"\t}",
			"",
			"}",
			""
		],
		"description": "Z-Wave Command Class implementation"
	},
	"Readonly property": {
		"prefix": "propread",
		"body": [
			"private _${1:value}: ${2:string};",
			"public get ${1}(): ${2} {",
			"\treturn this._${1};",
			"}${0}"
		]
	},
	"Z-Wave CC property": {
		"prefix": "zwccprop",
		"body": [
			"@ccValue() public ${1:property}: ${2:number};${0}"
		]
	}
}