{
	"Z-Wave message classes": {
		"prefix": "zwmsg",
		"body": [
			"import { FunctionType, MessagePriority, MessageType } from \"../message/Constants\";",
			"import { expectedResponse, Message, messageTypes, priority} from \"../message/Message\";",
			"",
			"@messageTypes(MessageType.Request, FunctionType.${1})",
			"@expectedResponse(FunctionType.${1})",
			"@priority(MessagePriority.${2})",
			"export class ${1}Request extends Message {",
			"",
			"}",
			"",
			"@messageTypes(MessageType.Response, FunctionType.${1})",
			"export class ${1}Response extends Message {",
			"",
			"\tpublic deserialize(data: Buffer): number {",
			"\t\tconst ret = super.deserialize(data);",
			"",
			"\t\t${0:// Parse payload here}",
			"",
			"\t\treturn ret;",
			"\t}",
			"}",
			""
		]
	},
	"Z-Wave toJSON override": {
		"prefix": "zwjson",
		"body": [
			"public toJSON() {",
			"\treturn super.toJSONInherited({",
			"\t\t${0}",
			"\t});",
			"}"
		]
	},
	"Z-Wave Command Class implementation": {
		"prefix": "zwcc",
		"body": [
			"import { ZWaveError, ZWaveErrorCodes } from \"../error/ZWaveError\";",
			"import { CommandClass, commandClass, CommandClasses, expectedCCResponse, implementedVersion } from \"./CommandClass\";",
			"",
			"export enum ${1}Command {",
			"\t${0:// All the supported commands}",
			"}",
			"",
			"@commandClass(CommandClasses.${1})",
			"@implementedVersion(${2:1})",
			"@expectedCCResponse(CommandClasses.${1})",
			"export class ${1}CC extends CommandClass {",
			"",
			"\t// tslint:disable:unified-signatures",
			"\tconstructor(nodeId?: number);",
			"",
			"\tconstructor(",
			"\t\tpublic nodeId: number,",
			"\t\tpublic ccCommand?: ${1}Command,",
			"\t) {",
			"\t\tsuper(nodeId);",
			"\t}",
			"\t// tslint:enable:unified-signatures",
			"",
			"\tpublic serialize(): Buffer {",
			"\t\tswitch (this.ccCommand) {",
			"\t\t\t// case ${1}Command.TODO:",
			"\t\t\t// \t// serialize payload",
			"\t\t\t// \tbreak;",
			"\t\t\tdefault:",
			"\t\t\t\tthrow new ZWaveError(",
			"\t\t\t\t\t\"Cannot serialize a ${1} CC with a command other than __TODO__\",",
			"\t\t\t\t\tZWaveErrorCodes.CC_Invalid,",
			"\t\t\t\t);",
			"\t\t}",
			"",
			"\t\treturn super.serialize();",
			"\t}",
			"",
			"\tpublic deserialize(data: Buffer): void {",
			"\t\tsuper.deserialize(data);",
			"",
			"\t\tthis.ccCommand = this.payload[0];",
			"\t\tswitch (this.ccCommand) {",
			"\t\t\t// case ${1}Command.TODO:",
			"\t\t\t// \t// parse payload",
			"\t\t\t// \tbreak;",
			"",
			"\t\t\tdefault:",
			"\t\t\t\tthrow new ZWaveError(",
			"\t\t\t\t\t\"Cannot deserialize a ${1} CC with a command other than TODO\",",
			"\t\t\t\t\tZWaveErrorCodes.CC_Invalid,",
			"\t\t\t\t);",
			"\t\t}",
			"\t}",
			"",
			"}",
			""
		],
		"description": "Z-Wave Command Class implementation"
	}
}